# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 24.11.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from groupdocs_translation_cloud.models.worksheet_data import WorksheetData
from typing import Optional, Set
from typing_extensions import Self

class FileRequest(BaseModel):
    """
    FileRequest
    """ # noqa: E501
    source_language: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default='en', description="Language of original file", alias="sourceLanguage")
    target_languages: Optional[List[StrictStr]] = Field(default=None, description="List of target languages", alias="targetLanguages")
    original_file_name: Optional[StrictStr] = Field(default=None, description="Type in the file name. If null will be as request ID.", alias="originalFileName")
    url: Optional[StrictStr] = Field(default=None, description="Link to file for translation. Ignore, if \"file\" property not null")
    origin: Optional[StrictStr] = Field(default=None, description="Url or name of application using this SDK. Not required.")
    saving_mode: Optional[StrictStr] = Field(default=None, description="Toggle file saving mode for storage.  Is Files by default.", alias="savingMode")
    format: Optional[StrictStr] = Field(default='Unknown', description="Input file format")
    output_format: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="output file format", alias="outputFormat")
    masters: Optional[StrictBool] = Field(default=False, description="If translate master slides")
    formatting: Optional[StrictBool] = Field(default=True, description="If document's formatting should be preserved, default true")
    route: Optional[StrictStr] = Field(default=None, description="Endpoint route")
    separator: Optional[StrictStr] = Field(default=None, description="Separator in files")
    elements: Optional[List[StrictInt]] = Field(default=None, description="List of slides to translate (1-based index). If not present, translate all elements (page, slide, worksheet)")
    ranges: Optional[Dict[str, WorksheetData]] = Field(default=None, description="Dictionary of ranges in Excel workbooks")
    shortcodedict: Optional[Dict[str, Optional[List[StrictStr]]]] = Field(default=None, description="Dictionary of short code names and parameters names to translate")
    front_matter_list: Optional[List[List[StrictStr]]] = Field(default=None, description="Dictionary where key is zero-based front matter index and value is list of lists of front matter paths", alias="frontMatterList")
    ignore_list: Optional[List[StrictStr]] = Field(default=None, description="List of elements for Xml, Json and Yaml formats. Determines which items should be blacklisted or whitelisted for processing depending on GroupDocs.Translation.ApiGateway.DTO.FileRequest.IsWhiteList.", alias="ignoreList")
    is_white_list: Optional[StrictBool] = Field(default=None, description="Determines to which list the items in GroupDocs.Translation.ApiGateway.DTO.FileRequest.IgnoreList should be allocated. The default is the black list.", alias="isWhiteList")
    __properties: ClassVar[List[str]] = ["sourceLanguage", "targetLanguages", "originalFileName", "url", "origin", "savingMode", "format", "outputFormat", "masters", "formatting", "route", "separator", "elements", "ranges", "shortcodedict", "frontMatterList", "ignoreList", "isWhiteList"]

    @field_validator('saving_mode')
    def saving_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Files', 'Archive', 'Both']):
            raise ValueError("must be one of enum values ('Files', 'Archive', 'Both')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Doc', 'Docx', 'Docm', 'Xls', 'Xlsx', 'Xlsm', 'Ppt', 'Pptx', 'Pptm', 'Txt', 'Pdf', 'Md', 'Resx', 'Html', 'Rtf', 'Odt', 'Ods', 'Odp', 'Csv', 'Tsv', 'Srt', 'Pdfx', 'Mp3', 'Wav', 'Flac', 'M4a', 'Aac', 'Wma', 'Flv', 'Mkv', 'Webm', 'Avi', 'Mov', 'Wmv', 'Rm', 'Mpg']):
            raise ValueError("must be one of enum values ('Unknown', 'Doc', 'Docx', 'Docm', 'Xls', 'Xlsx', 'Xlsm', 'Ppt', 'Pptx', 'Pptm', 'Txt', 'Pdf', 'Md', 'Resx', 'Html', 'Rtf', 'Odt', 'Ods', 'Odp', 'Csv', 'Tsv', 'Srt', 'Pdfx', 'Mp3', 'Wav', 'Flac', 'M4a', 'Aac', 'Wma', 'Flv', 'Mkv', 'Webm', 'Avi', 'Mov', 'Wmv', 'Rm', 'Mpg')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in ranges (dict)
        _field_dict = {}
        if self.ranges:
            for _key in self.ranges:
                if self.ranges[_key]:
                    _field_dict[_key] = self.ranges[_key].to_dict()
            _dict['ranges'] = _field_dict
        # set to None if original_file_name (nullable) is None
        # and model_fields_set contains the field
        if self.original_file_name is None and "original_file_name" in self.model_fields_set:
            _dict['originalFileName'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if route (nullable) is None
        # and model_fields_set contains the field
        if self.route is None and "route" in self.model_fields_set:
            _dict['route'] = None

        # set to None if separator (nullable) is None
        # and model_fields_set contains the field
        if self.separator is None and "separator" in self.model_fields_set:
            _dict['separator'] = None

        # set to None if elements (nullable) is None
        # and model_fields_set contains the field
        if self.elements is None and "elements" in self.model_fields_set:
            _dict['elements'] = None

        # set to None if ranges (nullable) is None
        # and model_fields_set contains the field
        if self.ranges is None and "ranges" in self.model_fields_set:
            _dict['ranges'] = None

        # set to None if shortcodedict (nullable) is None
        # and model_fields_set contains the field
        if self.shortcodedict is None and "shortcodedict" in self.model_fields_set:
            _dict['shortcodedict'] = None

        # set to None if front_matter_list (nullable) is None
        # and model_fields_set contains the field
        if self.front_matter_list is None and "front_matter_list" in self.model_fields_set:
            _dict['frontMatterList'] = None

        # set to None if ignore_list (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_list is None and "ignore_list" in self.model_fields_set:
            _dict['ignoreList'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceLanguage": obj.get("sourceLanguage") if obj.get("sourceLanguage") is not None else 'en',
            "targetLanguages": obj.get("targetLanguages"),
            "originalFileName": obj.get("originalFileName"),
            "url": obj.get("url"),
            "origin": obj.get("origin"),
            "savingMode": obj.get("savingMode"),
            "format": obj.get("format") if obj.get("format") is not None else 'Unknown',
            "outputFormat": obj.get("outputFormat"),
            "masters": obj.get("masters") if obj.get("masters") is not None else False,
            "formatting": obj.get("formatting") if obj.get("formatting") is not None else True,
            "route": obj.get("route"),
            "separator": obj.get("separator"),
            "elements": obj.get("elements"),
            "ranges": dict(
                (_k, WorksheetData.from_dict(_v))
                for _k, _v in obj["ranges"].items()
            )
            if obj.get("ranges") is not None
            else None,
            "shortcodedict": obj.get("shortcodedict"),
            "frontMatterList": obj.get("frontMatterList"),
            "ignoreList": obj.get("ignoreList"),
            "isWhiteList": obj.get("isWhiteList")
        })
        return _obj


