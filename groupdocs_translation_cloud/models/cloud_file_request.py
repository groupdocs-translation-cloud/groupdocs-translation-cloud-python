# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.3.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from groupdocs_translation_cloud.models.worksheet_data import WorksheetData

class CloudFileRequest(BaseModel):
    """
    CloudFileRequest
    """
    format: Optional[StrictStr] = Field(None, description="\"doc(x|m)\" if Word document, \"xls(x|m)\" if Excel workbook")
    out_format: Optional[StrictStr] = Field(None, alias="outFormat", description="output file format")
    request_id: Optional[StrictStr] = Field(None, alias="requestId", description="id of request")
    ids: Optional[conlist(StrictInt)] = Field(None, description="Language pairs to translate")
    url: Optional[StrictStr] = Field(None, description="Link to file for translation")
    size: Optional[StrictInt] = Field(None, description="File size")
    masters: Optional[StrictBool] = Field(None, description="If translate master slides")
    formatting: Optional[StrictBool] = Field(None, description="If document's formatting should be preserved, default true")
    origin: Optional[StrictStr] = Field(None, description="for analysis only")
    elements: Optional[conlist(StrictInt)] = Field(None, description="List of slides to translate")
    ranges: Optional[Dict[str, WorksheetData]] = Field(None, description="Dictionary of ranges in Excel workbooks")
    short_code_dict: Optional[Dict[str, conlist(StrictStr)]] = Field(None, alias="shortCodeDict", description="Dictiory of short code names and parameters names to translate")
    front_matter_list: Optional[conlist(conlist(StrictStr))] = Field(None, alias="frontMatterList", description="Dictionary where key is zero-based front matter index and value is list of lists of front matter paths")
    original_file_name: Optional[StrictStr] = Field(None, alias="originalFileName", description="Original name of file")
    separator: Optional[StrictStr] = Field(None, description="Separator in files")
    is_paid: Optional[StrictBool] = Field(None, alias="isPaid", description="Set true if paid user")
    saving_mode: Optional[StrictStr] = Field(None, alias="savingMode", description="Toggle files saving mode")
    details: Optional[Dict[str, StrictStr]] = Field(None, description="Details of the requests. Using for e2e tracking")
    __properties = ["format", "outFormat", "requestId", "ids", "url", "size", "masters", "formatting", "origin", "elements", "ranges", "shortCodeDict", "frontMatterList", "originalFileName", "separator", "isPaid", "savingMode", "details"]

    @validator('saving_mode')
    def saving_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Files', 'Archive', 'Both'):
            raise ValueError("must be one of enum values ('Files', 'Archive', 'Both')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CloudFileRequest:
        """Create an instance of CloudFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in ranges (dict)
        _field_dict = {}
        if self.ranges:
            for _key in self.ranges:
                if self.ranges[_key]:
                    _field_dict[_key] = self.ranges[_key].to_dict()
            _dict['ranges'] = _field_dict
        # set to None if format (nullable) is None
        # and __fields_set__ contains the field
        if self.format is None and "format" in self.__fields_set__:
            _dict['format'] = None

        # set to None if out_format (nullable) is None
        # and __fields_set__ contains the field
        if self.out_format is None and "out_format" in self.__fields_set__:
            _dict['outFormat'] = None

        # set to None if request_id (nullable) is None
        # and __fields_set__ contains the field
        if self.request_id is None and "request_id" in self.__fields_set__:
            _dict['requestId'] = None

        # set to None if ids (nullable) is None
        # and __fields_set__ contains the field
        if self.ids is None and "ids" in self.__fields_set__:
            _dict['ids'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if origin (nullable) is None
        # and __fields_set__ contains the field
        if self.origin is None and "origin" in self.__fields_set__:
            _dict['origin'] = None

        # set to None if elements (nullable) is None
        # and __fields_set__ contains the field
        if self.elements is None and "elements" in self.__fields_set__:
            _dict['elements'] = None

        # set to None if ranges (nullable) is None
        # and __fields_set__ contains the field
        if self.ranges is None and "ranges" in self.__fields_set__:
            _dict['ranges'] = None

        # set to None if short_code_dict (nullable) is None
        # and __fields_set__ contains the field
        if self.short_code_dict is None and "short_code_dict" in self.__fields_set__:
            _dict['shortCodeDict'] = None

        # set to None if front_matter_list (nullable) is None
        # and __fields_set__ contains the field
        if self.front_matter_list is None and "front_matter_list" in self.__fields_set__:
            _dict['frontMatterList'] = None

        # set to None if original_file_name (nullable) is None
        # and __fields_set__ contains the field
        if self.original_file_name is None and "original_file_name" in self.__fields_set__:
            _dict['originalFileName'] = None

        # set to None if separator (nullable) is None
        # and __fields_set__ contains the field
        if self.separator is None and "separator" in self.__fields_set__:
            _dict['separator'] = None

        # set to None if details (nullable) is None
        # and __fields_set__ contains the field
        if self.details is None and "details" in self.__fields_set__:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CloudFileRequest:
        """Create an instance of CloudFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CloudFileRequest.parse_obj(obj)

        _obj = CloudFileRequest.parse_obj({
            "format": obj.get("format"),
            "out_format": obj.get("outFormat"),
            "request_id": obj.get("requestId"),
            "ids": obj.get("ids"),
            "url": obj.get("url"),
            "size": obj.get("size"),
            "masters": obj.get("masters"),
            "formatting": obj.get("formatting"),
            "origin": obj.get("origin"),
            "elements": obj.get("elements"),
            "ranges": dict(
                (_k, WorksheetData.from_dict(_v))
                for _k, _v in obj.get("ranges").items()
            )
            if obj.get("ranges") is not None
            else None,
            "short_code_dict": obj.get("shortCodeDict"),
            "front_matter_list": obj.get("frontMatterList"),
            "original_file_name": obj.get("originalFileName"),
            "separator": obj.get("separator"),
            "is_paid": obj.get("isPaid"),
            "saving_mode": obj.get("savingMode"),
            "details": obj.get("details")
        })
        return _obj

