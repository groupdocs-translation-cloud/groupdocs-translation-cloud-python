# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 24.11.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TextRequest(BaseModel):
    """
    TextRequest
    """ # noqa: E501
    source_language: Optional[StrictStr] = Field(default=None, description="Language of original text", alias="sourceLanguage")
    target_languages: Optional[List[StrictStr]] = Field(default=None, description="List of target languages", alias="targetLanguages")
    texts: Optional[List[StrictStr]] = Field(default=None, description="Text array to translate")
    origin: Optional[StrictStr] = Field(default=None, description="For analysis only")
    contains_markdown: Optional[StrictBool] = Field(default=None, description="Set to true if you want to handle markdown in text", alias="containsMarkdown")
    __properties: ClassVar[List[str]] = ["sourceLanguage", "targetLanguages", "texts", "origin", "containsMarkdown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if source_language (nullable) is None
        # and model_fields_set contains the field
        if self.source_language is None and "source_language" in self.model_fields_set:
            _dict['sourceLanguage'] = None

        # set to None if target_languages (nullable) is None
        # and model_fields_set contains the field
        if self.target_languages is None and "target_languages" in self.model_fields_set:
            _dict['targetLanguages'] = None

        # set to None if texts (nullable) is None
        # and model_fields_set contains the field
        if self.texts is None and "texts" in self.model_fields_set:
            _dict['texts'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceLanguage": obj.get("sourceLanguage"),
            "targetLanguages": obj.get("targetLanguages"),
            "texts": obj.get("texts"),
            "origin": obj.get("origin"),
            "containsMarkdown": obj.get("containsMarkdown")
        })
        return _obj


