# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 23.9.4
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class TextRequest(BaseModel):
    """
    TextRequest
    """
    source_language: Optional[StrictStr] = Field(None, alias="sourceLanguage", description="Language of original text")
    target_languages: Optional[conlist(StrictStr)] = Field(None, alias="targetLanguages", description="List of target languages")
    texts: Optional[conlist(StrictStr)] = Field(None, description="Text array to translate")
    origin: Optional[StrictStr] = Field(None, description="For analysis only")
    contains_markdown: Optional[StrictBool] = Field(None, alias="containsMarkdown", description="Set to true if you want to handle markdown in text")
    __properties = ["sourceLanguage", "targetLanguages", "texts", "origin", "containsMarkdown"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextRequest:
        """Create an instance of TextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if source_language (nullable) is None
        # and __fields_set__ contains the field
        if self.source_language is None and "source_language" in self.__fields_set__:
            _dict['sourceLanguage'] = None

        # set to None if target_languages (nullable) is None
        # and __fields_set__ contains the field
        if self.target_languages is None and "target_languages" in self.__fields_set__:
            _dict['targetLanguages'] = None

        # set to None if texts (nullable) is None
        # and __fields_set__ contains the field
        if self.texts is None and "texts" in self.__fields_set__:
            _dict['texts'] = None

        # set to None if origin (nullable) is None
        # and __fields_set__ contains the field
        if self.origin is None and "origin" in self.__fields_set__:
            _dict['origin'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextRequest:
        """Create an instance of TextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextRequest.parse_obj(obj)

        _obj = TextRequest.parse_obj({
            "source_language": obj.get("sourceLanguage"),
            "target_languages": obj.get("targetLanguages"),
            "texts": obj.get("texts"),
            "origin": obj.get("origin"),
            "contains_markdown": obj.get("containsMarkdown")
        })
        return _obj

