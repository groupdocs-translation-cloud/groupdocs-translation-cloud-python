# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 23.9.4
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conlist
from groupdocs-translation-cloud.models.string_string_tuple import StringStringTuple

class WorksheetData(BaseModel):
    """
    WorksheetData
    """
    rows: Optional[conlist(StrictInt)] = None
    columns: Optional[conlist(StrictInt)] = None
    ranges: Optional[conlist(StringStringTuple)] = None
    __properties = ["rows", "columns", "ranges"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorksheetData:
        """Create an instance of WorksheetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item in self.ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ranges'] = _items
        # set to None if rows (nullable) is None
        # and __fields_set__ contains the field
        if self.rows is None and "rows" in self.__fields_set__:
            _dict['rows'] = None

        # set to None if columns (nullable) is None
        # and __fields_set__ contains the field
        if self.columns is None and "columns" in self.__fields_set__:
            _dict['columns'] = None

        # set to None if ranges (nullable) is None
        # and __fields_set__ contains the field
        if self.ranges is None and "ranges" in self.__fields_set__:
            _dict['ranges'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorksheetData:
        """Create an instance of WorksheetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorksheetData.parse_obj(obj)

        _obj = WorksheetData.parse_obj({
            "rows": obj.get("rows"),
            "columns": obj.get("columns"),
            "ranges": [StringStringTuple.from_dict(_item) for _item in obj.get("ranges")] if obj.get("ranges") is not None else None
        })
        return _obj

