# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 23.9.4
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class LanguagePairData(BaseModel):
    """
    LanguagePairData
    """
    source: Optional[StrictStr] = None
    targets: Optional[conlist(StrictStr)] = None
    __properties = ["source", "targets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LanguagePairData:
        """Create an instance of LanguagePairData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if source (nullable) is None
        # and __fields_set__ contains the field
        if self.source is None and "source" in self.__fields_set__:
            _dict['source'] = None

        # set to None if targets (nullable) is None
        # and __fields_set__ contains the field
        if self.targets is None and "targets" in self.__fields_set__:
            _dict['targets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LanguagePairData:
        """Create an instance of LanguagePairData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LanguagePairData.parse_obj(obj)

        _obj = LanguagePairData.parse_obj({
            "source": obj.get("source"),
            "targets": obj.get("targets")
        })
        return _obj

