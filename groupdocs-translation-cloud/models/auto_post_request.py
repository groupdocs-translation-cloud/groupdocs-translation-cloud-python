# coding: utf-8

"""
    GroupDocs.Translation SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 23.8.2
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictBytes, StrictInt, StrictStr, conlist, validator
from groupdocs-translation-cloud.models.worksheet_data import WorksheetData

class AutoPostRequest(BaseModel):
    """
    AutoPostRequest
    """
    format: StrictStr = Field(..., alias="Format")
    output_format: StrictStr = Field(..., alias="OutputFormat")
    masters: Optional[StrictBool] = Field(False, alias="Masters")
    formatting: Optional[StrictBool] = Field(True, alias="Formatting")
    route: Optional[StrictStr] = Field(None, alias="Route")
    separator: Optional[StrictStr] = Field(None, alias="Separator")
    elements: Optional[conlist(StrictInt)] = Field(None, alias="Elements")
    ranges: Optional[Dict[str, WorksheetData]] = Field(None, alias="Ranges")
    short_code_list: Optional[Dict[str, conlist(conlist(StrictStr))]] = Field(None, alias="ShortCodeList")
    front_matter_list: Optional[conlist(conlist(StrictStr))] = Field(None, alias="FrontMatterList")
    source_language: StrictStr = Field(..., alias="SourceLanguage")
    target_languages: conlist(StrictStr) = Field(..., alias="TargetLanguages")
    file: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="File")
    original_file_name: Optional[StrictStr] = Field(None, alias="OriginalFileName")
    url: Optional[StrictStr] = Field(None, alias="Url")
    origin: Optional[StrictStr] = Field(None, alias="Origin")
    saving_mode: Optional[StrictStr] = Field(None, alias="SavingMode")
    __properties = ["Format", "OutputFormat", "Masters", "Formatting", "Route", "Separator", "Elements", "Ranges", "ShortCodeList", "FrontMatterList", "SourceLanguage", "TargetLanguages", "File", "OriginalFileName", "Url", "Origin", "SavingMode"]

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Unknown', 'Doc', 'Docx', 'Docm', 'Xls', 'Xlsx', 'Xlsm', 'Ppt', 'Pptx', 'Pptm', 'Txt', 'Pdf', 'Md', 'Resx', 'Html', 'Rtf', 'Odt', 'Ods', 'Odp', 'Csv', 'Tsv'):
            raise ValueError("must be one of enum values ('Unknown', 'Doc', 'Docx', 'Docm', 'Xls', 'Xlsx', 'Xlsm', 'Ppt', 'Pptx', 'Pptm', 'Txt', 'Pdf', 'Md', 'Resx', 'Html', 'Rtf', 'Odt', 'Ods', 'Odp', 'Csv', 'Tsv')")
        return value

    @validator('saving_mode')
    def saving_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Files', 'Archive', 'Both'):
            raise ValueError("must be one of enum values ('Files', 'Archive', 'Both')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoPostRequest:
        """Create an instance of AutoPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in ranges (dict)
        _field_dict = {}
        if self.ranges:
            for _key in self.ranges:
                if self.ranges[_key]:
                    _field_dict[_key] = self.ranges[_key].to_dict()
            _dict['Ranges'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoPostRequest:
        """Create an instance of AutoPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutoPostRequest.parse_obj(obj)

        _obj = AutoPostRequest.parse_obj({
            "format": obj.get("Format") if obj.get("Format") is not None else 'Unknown',
            "output_format": obj.get("OutputFormat"),
            "masters": obj.get("Masters") if obj.get("Masters") is not None else False,
            "formatting": obj.get("Formatting") if obj.get("Formatting") is not None else True,
            "route": obj.get("Route"),
            "separator": obj.get("Separator"),
            "elements": obj.get("Elements"),
            "ranges": dict(
                (_k, WorksheetData.from_dict(_v))
                for _k, _v in obj.get("Ranges").items()
            )
            if obj.get("Ranges") is not None
            else None,
            "short_code_list": obj.get("ShortCodeList"),
            "front_matter_list": obj.get("FrontMatterList"),
            "source_language": obj.get("SourceLanguage") if obj.get("SourceLanguage") is not None else 'en',
            "target_languages": obj.get("TargetLanguages"),
            "file": obj.get("File"),
            "original_file_name": obj.get("OriginalFileName"),
            "url": obj.get("Url"),
            "origin": obj.get("Origin"),
            "saving_mode": obj.get("SavingMode")
        })
        return _obj

